                                                               Challenge1: Danny's Diner

--Submitted by Shreya Singh


--Q1. What is the total amount each customer spent at the restaurant?

Select s.customer_id, sum(m.price) as total_amount from sales s join menu m on s.product_id = m.product_id 
group by s.customer_id order by s.customer_id;

--Q2. How many days has each customer visited the restaurant?

select customer_id, count(distinct(order_date)) as total_visits from sales group by customer_id;

--Q3. What was the first item from the menu purchased by each customer?
with sales_and_menu as(
Select s.*, m.product_name, rank() over (partition by customer_id order by order_date) as ranking from sales s join menu m on 
s.product_id = m.product_id)
select * from sales_and_menu where ranking = 1;

--Q4. What is the most purchased item on the menu and how many times was it purchased by all customers?

select m.product_name, count(*) as total_purchase from menu 
m join sales s on m.product_id = s.product_id group by product_name order by total_purchase desc limit 1;  

--Q5. Which item was the most popular for each customer?

with newtable as(
select s.customer_id, m.product_name, count(*) as total_purchase from menu m join sales s 
on m.product_id = s.product_id group by s.customer_id, m.product_name),
final as
(select newtable.*, rank() over (partition by customer_id order by total_purchase desc) as ranking from newtable)
select * from final where ranking = 1;

--Q6. Which item was purchased first by the customer after they became a member?

with final as
(Select m.*, s.order_date, s.product_id, me.product_name, rank() over (partition by m.customer_id order by order_date) as ranking from sales s left join
members m on s.customer_id = m.customer_id join menu me on s.product_id = me.product_id where s.order_date >= m.join_date)
select customer_id, product_name, ranking from final where ranking = 1;


--Q7. Which item was purchased just before the customer became a member?

with final as
(Select m.*, s.order_date, s.product_id, me.product_name, rank() over (partition by m.customer_id order by order_date) as ranking from sales s left join
members m on s.customer_id = m.customer_id join menu me on s.product_id = me.product_id where s.order_date < m.join_date)
select customer_id, product_name, ranking from final where ranking = 1; 


--Q8. What is the total items and amount spent for each member before they became a member?

with final as
(Select me.product_name, me.price, m.customer_id, m.join_date, s.order_date from members m
join sales s on m.customer_id = s.customer_id join menu me on s.product_id = me.product_id 
where s.order_date < m.join_date)
select customer_id, sum(price) as total_amount, count(distinct product_name) as total_item from final group by customer_id;



--Q9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

with final as
(Select s.customer_id, m.product_name, m.price,
case when m.product_name = 'sushi' then 2*m.price
else m.price 
end as new_price from sales s join menu m on s.product_id = m.product_id)
select customer_id, sum(new_price)*10 as total_points from final group by customer_id order by customer_id;



--Q10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

with final as
(Select s.customer_id, m.product_name, m.price,
case when m.product_name = 'sushi' then 2*m.price
 when s.order_date between me.join_date and (me.join_date + interval '6' day) then 2*m.price
else m.price 
end as new_price from menu m join sales s on m.product_id = s.product_id join members me 
on s.customer_id = me.customer_id where order_date <= '2021-01-31') 
select customer_id, sum(new_price)*10 as total_points from final group by customer_id order by customer_id;

--Bonus Questions

--solution1

Select m.customer_id, s.order_date, me.product_name, me.price, case when s.order_date < m.join_date then 'N'
when m.join_date is null then 'N' else 'Y' 
end as member 
from members m join sales s on m.customer_id = s.customer_id
join menu me on s.product_id = me.product_id ;

--solution2

with final as
(Select m.customer_id, s.order_date, me.product_name, me.price, case when s.order_date < m.join_date then 'N'
when m.join_date is null then 'N' else 'Y' 
end as member 
from members m join sales s on m.customer_id = s.customer_id
join menu me on s.product_id = me.product_id)
Select *, case when member = 'N' then null
else
rank() over (partition by customer_id, member order by order_date) end as rank from final;












































